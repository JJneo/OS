############################################################
#  빌드 환경 및 규칙 설정
############################################################

NASM32 = nasm
GCC32 = x86_64-pc-linux-gcc.exe -c -m32 -ffreestanding		; Main.c를 라이브러리를 사용하지 않는 Main.o로 컴파일 하는 방법
LD32 = x86_64-pc-linux-ld.exe -melf_i386 -T ../elf_i386.x -nostdlib -e Main -Ttext 0x10200	;링커 스크립트를 직접 지정하여 오브젝트 파일을 링크하는 예
																							; -melf_i386	: 2장에서 크로스 컴파일한 Binutils가 기본적으로 64비트 코드를 생성함으로 32 비트 실행 파일을 위해 옵션설정
																							; -T elf_i386.x : elf_i386 링커 스크립트를 이용해서 링크 수행
																							; -nostdlib		: 표준 라이브러리를 사용하지 않고 링크 수행
																							; -e Main		: Main을 엔트리 포인트로 지정
																							; -Ttext 0x10200: .text 섹션의 시작 어드레스 지정.

OBJCOPY32 = x86_64-pc-linux-objcopy -j .text -j .data -j .rodata -j .bss -S -0 binary		; objcopy 프로그램으로 실행 파일에서 불필요한 섹션을 제외하고 꼭 필요한 코드 섹션과 데이터 섹션만 추출함

OBJECTDIRECTORY = Temp
SOURCEDIRECTORY = Source

############################################################
#  항목 및 빌드 방법 설정
############################################################

all: prepare Kernel32.bin

prepare:
	mkdir -p $(OBJECTDIRECTORY)

$(OBJECTDIRECTORY)/EntryPoint.bin: $(SOURCEDIRECTORY)/EntryPoint.s
	$(NASM32) -o $@ $<

dep:
		@echo === Make Dependancy File ===
		make -C $(OBJECTDIRECTORY) -f ../makefile InternalDependency
		@cho === Dependeancy Search Complete ===

ExecuteInternalBuild: dep
					  make -C $(OBJECTDIRECTORY) -f ../makefile kernel32.elf

$(OBJECTDIRECTORY)/kernel32.elf.bin: ExecuteInternalBuild
	$(OBJCOPY32) $(OBJECTDIRECTORY)/kernel32.elf $@

Kernel32.bin: $(OBJECTDIRECTORY)/EntryPoint.bin $(OBJECTDIRECTORY)/Kernel32.elf.bin
	cat $^ > $@

clean:
		rm -f *.bin
		rm -f $(OBJECTDIRECTORY)/*.*

############################################################
#  Make에 의해 다시 호출되는 부분, Temp 디렉터리를 기준으로 수행됨
############################################################

CENTRYPOINTOBJECTFILE = Main.o
CSOURCEFILES = $(wildcard ../$(SOURCEDIRECTORY)/*.c
ASSEMBLYSOURCEFILES = $(wildcard ../$(SOURCEDIRECTORY)/*.asm)
COBJECTFILES = $(subst Main.o, , $(notdir $(patsubst %.c,%.o,$(CSOURCEFILES))))
ASSEMBLYOBJECTFILES = $(notdir $(patsubst %.asm,%.o,&(ASSEMBLYSOURCEFILES)))

# .c 파일을 .o 파일로 바꾸는 규칙 정의
%.o: ../$(SOURCEDIRECTORY)%.c
	$(GCC32) -c $<

# .asm 파일을 .o파일로 바꾸는 규칙 정의
%.o: ../$(SOURCEDIRECTORY)/%.asm
	$(NASM32) -f elf32 -o $@ $<

InternalDependency:
	$(GCC32) -MM $(CSOURCEFILES) > Dependency.dep

Kernel32.elf: $(CENTRYPOINTOBJECTFILE) $(COBJECTFILES) $(ASSEMBLYOBJECTFILES)
	$(LD32) -o $@ $^

ifeq (Dependency.dep, $(wildcard Dependency.dep))
include Dependency.dep
endif
